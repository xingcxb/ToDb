name: ToDb

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # yarn build
      - uses: borales/actions-yarn@v2.3.0
      - run: |
          cd ./frontend
          yarn install
          yarn run build
      # upload
      - name: Upload frontend build
        uses: actions/upload-artifact@v2
        with:
          name: frontend-artifact
          path: ./frontend/build
      - name: Get the version
        id: get_version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
          echo ::set-output name=COMMIT::$(echo $GITHUB_SHA)
          echo ::set-output name=DATE::$(date +'%Y-%m-%d')
    outputs:
      VERSION: ${{steps.get_version.outputs.VERSION}}
      COMMIT: ${{steps.get_version.outputs.COMMIT}}
      DATE: ${{steps.get_version.outputs.DATE}}

  platform-build:
    strategy:
      matrix:
        go-version: [1.17]
        # platform: [macos-latest]
        platform: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{matrix.platform}}
    needs: frontend-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # - name: Get the version
      #   id: get_version
      #   run: |
      #     echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      #     echo ::set-output name=COMMIT::$(echo $GITHUB_SHA)
      #     echo ::set-output name=DATE::$(date +'%Y-%m-%d')
      - name: Download frontend build
        uses: actions/download-artifact@v2
        with:
          name: frontend-artifact
          path: ./desktop/web/build
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{matrix.go-version}}
      - run: |
          cd ./desktop
          go install github.com/wailsapp/wails/v2/cmd/wails@v2.0.0-beta.34
      - name: Build package osx
        if: matrix.platform == 'macos-latest'
        run: |
          cd ./desktop
          npm install -g appdmg
          # darwin/amd64
          wails build -s -platform darwin/amd64 -ldflags '-s -w -X main.version=${{ needs.frontend-build.outputs.VERSION }} -X main.commit=${{ needs.frontend-build.outputs.COMMIT}} -X main.date=${{needs.frontend-build.outputs.DATE}} -X main.builtBy=GithubActions -X main.MODE=release'
          # ls -lh ./build/bin/ToDb.app/Contents/MacOS
          # truning .app to .dmg
          codesign --force --deep --sign - ./build/bin/ToDb.app
          appdmg dmg-spec.json ToDb.dmg
          # darwin/arm64
          # wails build -s -platform darwin/arm64  -ldflags '-s -w -X main.version=${{ needs.frontend-build.outputs.VERSION }} -X main.commit=${{ needs.frontend-build.outputs.COMMIT}} -X main.date=${{needs.frontend-build.outputs.DATE}} -X main.builtBy=GithubActions -X main.MODE=release'
          # appdmg dmg-spec.json ToDb_darwin_arm64.dmg

      - name: Build package linux
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd ./desktop
          sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
          # wails doctor
          wails build -s -ldflags '-s -w -X main.version=${{ needs.frontend-build.outputs.VERSION }} -X main.commit=${{ needs.frontend-build.outputs.COMMIT}} -X main.date=${{needs.frontend-build.outputs.DATE}} -X main.builtBy=GithubActions -X main.MODE=release'
          # turn into app image
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
          ./linuxdeploy*.AppImage --appdir AppDir --executable ./build/bin/ToDb --desktop-file=ToDb.AppImage.desktop --icon-file=./iconset/icon_128x128.png --output appimage
          ls ./
          cp ToDb-*.AppImage ./ToDb_amd64.AppImage

      - name: Build package windows
        if: matrix.platform == 'windows-latest'
        run: |
          cd ./desktop
          # wails doctor
          wails build -s -ldflags '-s -w -X main.version=${{ needs.frontend-build.outputs.VERSION }} -X main.commit=${{ needs.frontend-build.outputs.COMMIT}} -X main.date=${{needs.frontend-build.outputs.DATE}} -X main.builtBy=GithubActions -X main.MODE=release'
          dir
          copy build/bin/ToDb.exe build/bin/ToDb_windows_amd64.exe

      - name: Upload artifact osx
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ToDb.dmg
          path: |
            desktop/ToDb.dmg
            # ToDb_darwin_amd64.dmg
            # ToDb_darwin_arm64.dmg

      - name: Upload artifact linux
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ToDb_amd64.AppImage
          path: desktop/ToDb_amd64.AppImage

      - name: Upload artifact windows
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ToDb_windows_amd64.exe
          path: desktop/build/bin/ToDb_windows_amd64.exe

  release:
    runs-on: ubuntu-latest
    needs: platform-build
    steps:
      - name: Download artifact osx
        uses: actions/download-artifact@v3
        with:
          name: ToDb.dmg
          path: ./bin/
      - name: Download artifact linx
        uses: actions/download-artifact@v3
        with:
          name: ToDb_amd64.AppImage
          path: ./bin/
      - name: Download artifact windows
        uses: actions/download-artifact@v3
        with:
          name: ToDb_windows_amd64.exe
          path: ./bin/
      - name: Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          # automatic_release_tag: "latest"
          prerelease: false
          title: ${{needs.frontend-build.outputs.VERSION}}
          files: |
            ./bin/**
